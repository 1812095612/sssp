<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!--  
        Spring 整合 JPA:
        1. 配置 EntityManagerFactory
        1.1 需要配置 JPA 实现的适配器
        1.2 配置自动扫描的包: 扫描哪些包下的 实体类. 注意: 不能使用 classpath 前缀
        1.3 在配置 JPA 的属性时可以加入生成的数据表的列的映射策略: 自动的把驼峰法规则对应的属性映射为 _ 连接的列的名字. 例如: lastName 和 LAST_NAME
        
        2. JpaTransactionManager
        3. 在 Dao 中通过 @PersistenceContext 注解装配和当前线程绑定的 EntityManager 对象. 
        
                    加入 SpringData
        1. 加入 jar 包:
        spring-data-commons-1.6.2.RELEASE.jar
        spring-data-jpa-1.4.2.RELEASE.jar
        slf4j-api-1.6.1.jar
        
        2. 在 Spring 的配置文件中配置 SpringData
        2.1 加入 jpa 的命名空间
        
        3. 声明接口. 且其需要继承 Repository 或其子接口.
        4. 在接口中声明方法.
        5. 测试
    -->

    <!-- 扫描组件的包 -->
    <context:component-scan base-package="com.qiaosoftware.sssp">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 配置C3P0数据源 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
    </bean>
    
    <!-- 配置EntityManagerFactory -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 配置JPA实现的适配器 -->
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
        </property>
        <!-- 配置自动扫描的包：扫描哪些包下的实体类 -->
        <property name="packagesToScan" value="com.qiaosoftware.sssp"></property>
        <property name="jpaProperties">
            <props>
                <!-- 二级缓存相关 -->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="net.sf.ehcache.configurationResourceName">ehcache-hibernate.xml</prop>
                <!-- 生成的数据表的列的映射策略：自动把驼峰法规则对应的属性映射为 _ 连接的列的名字。例如：lastName和LAST_NAME -->
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <!-- hibernate 基本属性 -->
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
            </props>
        </property>
        <!-- 设置缓存的策略 -->
        <property name="sharedCacheMode" value="ENABLE_SELECTIVE"></property>
    </bean>
    
    <!-- 配置声明式事务 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"></property>
    </bean>
    
    <!-- 在IOC容器中配置JdbcTemplate本身的bean -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!-- 装配数据源对象 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- 为了使用具名参数的SQL语句，需要配置NamedJdbcTemplate -->
    <bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <!-- 装配jdbcTemplate，或数据源 -->
        <constructor-arg ref="jdbcTemplate"/>
    </bean>
    
    <!-- 启用基于注解的声明式事务 -->
    <tx:annotation-driven/>
    
    <!-- 配置SpringData -->
    <jpa:repositories base-package="com.qiaosoftware.sssp.repository" 
                entity-manager-factory-ref="entityManagerFactory"></jpa:repositories>

</beans>
